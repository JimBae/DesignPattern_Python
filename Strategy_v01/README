* ref : Fluent Python
Case study: refactoring Strategy
Strategy is a good example of a design pattern that can be simpler in Python if you
leverage functions as first class objects. In the following section we describe and im‐
plement Strategy using the “classic” structure described in the Design patterns book. If
you are familiar with the classic pattern, you may skip to “Function-oriented Strat‐
egy” on page 172 where we refactor the code using functions, significantly reducing the
line count.
Classic Strategy

The Strategy pattern is summarized like this in the Design Patterns book:
Define a family of algorithms, encapsulate each one, and make them interchangeable.
Strategy lets the algorithm vary independently from clients that use it. 3
A clear example of Strategy applied in the e-commerce domain is computing discounts
to orders according to the attributes of the customer or inspection of the ordered items.
Consider an online store with these discount rules:
• customers with 1000 or more fidelity points get a global 5% discount per order;
• a 10% discount is applied to each line item with 20 or more units in the same order;
• orders with at least 10 distinct items get a 7% global discount.
For brevity, let us assume that only one discount may be applied to an order.
The UML class diagram for the Strategy pattern is depicted in Figure 6-1. Its participants
are:
Context
Provides a service by delegating some computation to interchangeable components
that implement alternative algorithms. In the e-commerce example, the context is
an Order , which is configured to apply a promotional discount according to one of
several algorithms.
Strategy
The interface common to the components that implement the different algorithms.
In our example, this role is played by an abstract class called Promotion .
Concrete Strategy
One of the concrete subclasses of Strategy. FidelityPromo , BulkPromo and Large
OrderPromo are the three concrete strategies implemented.
The code in Example 6-1 follows the blueprint in Figure 6-1. As described in the Design
Patterns book, the concrete strategy is chosen by the client of the context class. In our
example, before instantiating an order, the system would somehow select a promotional
discount strategy and pass it to the Order constructor. The selection of the strategy is
outside of the scope of the pattern.


Example 6-1. Implementation Order class with pluggable discount strategies.
from abc import ABC, abstractmethod
from collections import namedtuple
Customer = namedtuple('Customer', 'name fidelity')

class LineItem:
def __init__(self, product, quantity, price):
self.product = product
self.quantity = quantity
self.price = price
def total(self):
return self.price * self.quantity
class Order:
# the Context
def __init__(self, customer, cart, promotion=None):
self.customer = customer
self.cart = list(cart)
self.promotion = promotion
def total(self):
if not hasattr(self, '__total'):
self.__total = sum(item.total() for item in self.cart)
return self.__total
def due(self):
if self.promotion is None:
discount = 0
else:
discount = self.promotion.discount(self)
return self.total() - discount
def __repr__(self):
fmt = '<Order total: {:.2f} due: {:.2f}>'
return fmt.format(self.total(), self.due())
class Promotion(ABC):
# the Strategy: an Abstract Base Class
@abstractmethod
def discount(self, order):
"""Return discount as a positive dollar amount"""
class FidelityPromo(Promotion): # first Concrete Strategy
"""5% discount for customers with 1000 or more fidelity points"""
def discount(self, order):
return order.total() * .05 if order.customer.fidelity >= 1000 else 0
class BulkItemPromo(Promotion): # second Concrete Strategy
"""10% discount for each LineItem with 20 or more units"""
def discount(self, order):
discount = 0
for item in order.cart:
if item.quantity >= 20:
discount += item.total() * .1
return discount
class LargeOrderPromo(Promotion): # third Concrete Strategy
"""7% discount for orders with 10 or more distinct items"""
def discount(self, order):
distinct_items = {item.product for item in order.cart}
if len(distinct_items) >= 10:
return order.total() * .07
return 0




